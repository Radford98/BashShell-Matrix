#Brad Powell
#CS344_400 Spring 2019
#Program 1 - Matrix

#!/bin/bash

# Set up file path - used for dims, mean, transpose
datafilepath="datafile$$"
if [ "$#" = "1" ]
then
	cat > "$datafilepath"
elif [ "$#" = "2" ]
then
	datafilepath=$2
fi



############################################################################################
# Accepts a single matrix from stdin or as a parameter and reports the dimensions in "rows columns"
dims() {

read < $datafilepath
if [ $? -ne 0 ]
then
	echo "Error reading file" 1>&2
	exit 1
fi

# Use wc to count the lines/rows, pipe that into read to remove the " [file_name]",
# using a subshell to echo the reply.
# COLS is first set to the number of words in the matrix, then divided by the number of rows
# to get the number of columns.
ROWS=`wc -l $datafilepath | (read -d " "; echo $REPLY)`
COLS=`wc -w $datafilepath | (read -d " "; echo $REPLY)`
(( COLS = COLS / ROWS ))
echo "$ROWS $COLS"

}

###########################################################################################
# Accepts a matrix either from stdin or as a parameter. It calculates and prints the mean of
# each column of the provided matrix.
mean() {

echo "mean function"
# Create ROWS/COLS variables for use in loops
dims $datafilepath > /dev/null

# Calculate whether there is an odd or even number of rows
(( MATH = ROWS % 2 ))
if [ $MATH -eq 1 ]
then
	echo "odd"
else
	echo "even"
fi
# Array to hold a column of data at a time
ARRAY=()

# Cut the matrix one column at a time.
i=1
while [ $i -le $COLS ]
do
	TEMP=`cut -f $i $datafilepath`
	for var in $TEMP
	do
		echo $var
	done

	(( i++ ))
done


}


#
#additional functions go here
#

# Converts the first parameter into a function call and the rest of the parameters to the function's parameters.
$1 "${@:2}"


# Delete the temporary data file if necessary
if [ "$#" = "1" ]
then
	rm -f $datafilepath
fi
