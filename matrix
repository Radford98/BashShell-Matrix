#Brad Powell
#CS344_400 Spring 2019
#Program 1 - Matrix

#!/bin/bash

trap finish EXIT

# Set up file path - used for dims, mean, transpose
datafilepath="datafile$$"
if [ "$#" = "1" ]
then
	cat > "$datafilepath"
elif [ "$#" = "2" ]
then
	datafilepath=$2
fi



############################################################################################
# Accepts a single matrix from stdin or as a parameter and reports
# the dimensions in "rows columns"
dims() {

# Error checking for unreadable file
read < $datafilepath
if [ $? -ne 0 ]
then
	echo "Error reading file" 1>&2
	exit 1
fi

# Use wc to count the lines/rows, pipe that into read to remove the " [file_name]",
# using a subshell to echo the reply.
# COLS is first set to the number of words/numbers in the matrix,
# then divided by the number of rows to get the number of columns.
ROWS=`wc -l $datafilepath | (read -d " "; echo $REPLY)`
COLS=`wc -w $datafilepath | (read -d " "; echo $REPLY)`
(( COLS = COLS / ROWS ))
echo "$ROWS $COLS"

}

###########################################################################################
# Accepts a matrix either from stin or as a parameter. It reflects a matrix along its
# diagonal, turning an MxN matrix into NxM. For example, the element at [1, 2] becomes the
# element at [2, 1]
transpose() {

# Create ROWS/COLS variables for use in loops/calculations. Dump the echo into null.
# Also checks for unreadable files
dims $datafilepath > /dev/null

# First, the elements of the matrix are stored in an array so they are
# random-accessible based on need for the transposed matrix.
ARRAY=()
while read
do
	for var in $REPLY
	do
		ARRAY+=( "$var" )
	done
done < $datafilepath

# The following loop uses a formula to construct the transposed matrix line-by-line,
# building a string and echoing it when the line is complete.
# The formula is (current row * total columns) + current column. The numbering for current
# row/column starts at 0 to reflect array values.
# The i loop is rows, but uses COLS so the transposed matrix has the correct dimension.
# Opposite for j. In the formula, j is used as "current row" because the formula refers
# to the original matrix, not the new one being constructed.
i=0
while [ $i -lt $COLS ]
do
	STRING=""	# Reset string to empty

	j=0
	while [ $j -lt $ROWS ]
	do
		# Construct the string
		STRING+="${ARRAY[ (( (j*COLS)+i )) ]}\t"
		(( j++ ))
	done

	# Report the transposed matrix one line at a time, after removing the final tab
	STRING=${STRING%?}
	STRING=${STRING%?}
	echo -e $STRING

	(( i++ ))
done

}

###########################################################################################
# Accepts a matrix either from stdin or as a parameter. It calculates and prints the mean of
# each column of the provided matrix.
mean() {

# Create ROWS/COLS variables for use in loops. Dump the echo into null.
# Also error checks for unreadable files.
dims $datafilepath > /dev/null

# String to hold the means for reporting
STRING=""

# Loop to cut (by field) one column of the matrix at a time. It adds up the numbers in that
# column and uses that total with the number of rows (from 'dims' earlier) as well as
# the rounding formula from the assignment page to calculate the mean.
i=1
while [ $i -le $COLS ]
do
	TOTAL=0 	# Variable to hold the total of a column
	TEMP=`cut -f $i $datafilepath`	# Cut the column and store in TEMP
	for var in $TEMP
	do
		# Add up the column
		(( TOTAL += var ))
	done

	# Calculate the mean from TOTAL/number of rows
	(( MEAN = (TOTAL + (ROWS/2)*( (TOTAL>0)*2-1)) / ROWS ))

	# Construct the string for reporting
	STRING+="$MEAN\t"

	(( i++ ))
done

# Remove the tab from the end of the string
STRING=${STRING%?}
STRING=${STRING%?}

# Report the means as a 1xN matrix
echo -e $STRING

}

###########################################################################################
# Accepts two matrices of the same size and adds them together, printing out the new matrix
add () {

# Error checking for two arguments
if [ $# -ne 2 ]
then
	echo "Improper number of matrices" 1>&2
	exit 2
fi

# Grab the dimensions of both matrices
datafilepath=$1
dims $datafilepath > /dev/null
ROWS1=$ROWS
COLS1=$COLS
datafilepath=$2
dims $datafilepath > /dev/null
ROWS2=$ROWS
COLS2=$COLS

# Check if matrices are the same size
if [ $ROWS1 -ne $ROWS2 ] || [ $COLS1 -ne $COLS2 ]
then
	echo "Matrices must be the same size" 1>&2
	exit 3
fi

# Put all of the values of the first matrix in an array for addition later
ARRAY=()
while read
do
	for var in $REPLY
	do
		ARRAY+=( "$var" )
	done
done < $1

# Add values of matrix 2 to those of matrix 1
# Formula, as discussed in previous function, is (current row * total columns) + current column.
# Construct and print the rows while we're at it
i=0
while read
do
	STRING=""
	j=0
	for var in $REPLY
	do
		# Adds the element of the second matrix to the first and stores in array.
		# That value is then added to the string.
		(( ARRAY[ (( (i * COLS1) + j )) ]+=var ))
		STRING+="${ARRAY[ (( (i*COLS1)+j )) ]}\t"
		
		(( j++ ))
	done

	# Report the matrix line by line
	STRING=${STRING%?}
	STRING=${STRING%?}
	echo -e $STRING

	(( i++ ))
done < $2

}

###########################################################################################
# Accepts two matrices of MxN and NxP and multiplies them together, resulting in a matrix
# of MxP
multiply () {

# Error checking
if [ $# -ne 2 ]
then
	echo "Improper number of matrices" 1>&2
	exit 2
fi

# Grab the dimensions of both matrices
datafilepath=$1
dims $datafilepath > /dev/null
ROWS1=$ROWS
COLS1=$COLS
datafilepath=$2
dims $datafilepath > /dev/null
ROWS2=$ROWS
COLS2=$COLS

# Check if the matrices are properly size
if [ $COLS1 -ne $ROWS2 ]
then
	echo "Improperly sized matrices" 1>&2
	exit 3
fi

# This loop grabs the first row of the first matrix with read.
# Nested loop goes through each column of the second matrix, using the cut command.
# The values of the second matrix are stored in an array, then another loop goes through
# the values of the first matrix (in REPLY), multiplying the appropriate matrix cells
# together and adding it to SUM.
# A string is constructed with the the sums. Once all columns of matrix 2 are multiplied
# by the row of matrix 1, the string is printed.
# Repeat until the multiplication is complete

while read
do
	STRING=""
	x=1	# Used to keep track of which column to cut
	while [ $x -le $COLS2 ]
	do
		# Store a column of matrix 2 in ARRAY
		ARRAY=()
		y=`cut -f $x $2`	# Cut the x-th field/column of matrix 2 and store in y
		for var in $y
		do
			ARRAY+=( "$var" )
		done
		
		# For each element in REPLY, multiply by corresponding number in the array,
		# adding the result to SUM.
		i=0	# Index for array
		SUM=0	# Sum of row*column multiplication
		for var in $REPLY
		do
			(( SUM += (var * ARRAY[i]) ))
			(( i++ ))
		done

		STRING+="$SUM\t"
		(( x++ ))
	done

	# Cut off last tab and echo
	STRING=${STRING%?}
	STRING=${STRING%?}
	echo -e "$STRING"

done < $1

}

# Function in the trap statement to remove any temporary files when the program exits
# The idea for using the exit signal came from redsymbol.net/articles/bash-exit-traps/
finish () {
rm -f datafile*
}

# Converts the first parameter into a function call and the rest of the
# parameters to the function's parameters.
$1 "${@:2}"
# Check for a bad file command
if [ $? -ne 0 ]
then
	echo "No such command" 1>&2
	exit 5
fi
